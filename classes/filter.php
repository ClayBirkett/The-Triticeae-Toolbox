<?php
/**
 * Base filter class
 *
 * @author Gavin Monroe
 */
require("phenotype_filter.php");
require("experiment_filter.php");
require("line_records_filter.php");

/**
 * Represents a filter as seen in the Advanced Phenotype Search
 *
 * Technically, a filter is a wrapper for an sql query. An sql query is
 * generated based on the values of the member variables of a filter
 *
 * @author Gavin Monroe
 */
class Filter
{
    protected $identifier;
    protected $table_name;
    protected $field_names;
    protected $bounds;
    protected $sub_filter;
	/* Note: a sub filter, is another filter that is considered to be a child of
	this filter for the purposes of representing filters as a linked list
	whereas on filter uses the sql statement generated by its child to form its
	own sql statement*/

    protected $as_mappings = array(
        'line_records' => 'l',
        'phenotypes' => 'p',
        'phenotype_data' => 'pd',
        'tht_base' => 't',
        'experiments' => 'e',
        'units' => 'u',
    );

    public function __construct($identifier, $table_name, array $field_names = null, array $bounds = null)
    {
        if (empty($identifier))
        {
            $identifier = md5(time() + microtime());
        }
        $this->identifier = $identifier;
        $this->table_name = $table_name;
        $this->field_names = $field_names;
        $this->bounds = $bounds;
    }

    public function sub_filter(Filter $filter)
    {
        $this->sub_filter = $filter;
    }
    public function get_sql()
    {
        $sql = 'SELECT * FROM ' . $this->table_name . ' WHERE ' . $this->get_where();
        return $sql;
    }
    public function get_where()
    {
        $first_field = array_shift($this->field_names);
        $first_bound = array_shift($this->bounds);
        $where = $first_field . ' ' . $first_bound;
        foreach($this->field_names as $key => $current_field)
        {
            $current_bound = $this->bounds[$key];
            $where .= ' AND ' . $current_field . ' ' . $current_bound;
        }
        return $where;
    }

	/*
	 * Getters
	 */
    public function identifier()
    {
        return $this->identifier;
    }
    public function bounds()
    {
        return $this->bounds;
    }
    public function field_names()
    {
        return $this->field_names;
    }
    public function table_name()
    {
        return $this->table_name;
    }
}

?>
